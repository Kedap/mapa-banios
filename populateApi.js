"use strict";
const axios = require("axios");

// --- Configuraci√≥n ---
const API_BASE_URL = "http://localhost:3000/api";
const NUM_BA√ëOS_A_CREAR = 15; // A√±adir√° 15 ba√±os adem√°s de los que ya tienes
const NUM_RESE√ëAS_POR_BA√ëO = 2; // A√±adir√° 2 rese√±as a CADA ba√±o (nuevos y existentes)
const NUM_REPORTES_TOTALES = 10; // A√±adir√° 10 reportes aleatorios

// --- Datos de Ejemplo ---
const nombresBa√±os = [
  "El Descanso Feliz",
  "Sanitario La Esquina",
  "Ba√±os El Oasis",
  "Servicios El Tr√©bol",
  "El Rinc√≥n Limpio",
  "Estaci√≥n Sanitaria",
  "Punto de Alivio",
  "La Parada Esencial",
  "El Refugio del Viajero",
  "Ba√±os La Central",
];
const nombresUsuarios = [
  "Laura G.",
  "Carlos M.",
  "Sofia P.",
  "David R.",
  "Ana V.",
  "Miguel S.",
  "Elena C.",
  "Juan D.",
  "Maria L.",
  "Pedro F.",
];
const comentariosRese√±as = [
  "Justo lo que necesitaba.",
  "Podr√≠a estar m√°s limpio.",
  "Excelente servicio, muy r√°pido.",
  "No hab√≠a papel, pero por lo dem√°s bien.",
  "Un poco caro para lo que es.",
  "Muy seguro y bien iluminado.",
  "Lo recomiendo totalmente.",
  "Me sac√≥ de un apuro.",
  "El personal es muy amable.",
  "Volver√≠a a usarlo.",
];
const tiposReportes = [
  "Ubicaci√≥n Incorrecta",
  "Permanentemente Cerrado",
  "Horario Incorrecto",
  "Mantenimiento Urgente",
  "Dato Incorrecto",
];

// --- Funciones Helper ---

/**
 * Obtiene un elemento aleatorio de un array.
 * @param {Array<any>} arr
 */
const getRandom = (arr) => arr[Math.floor(Math.random() * arr.length)];

/**
 * Genera coordenadas aleatorias cerca de un punto central.
 */
const getRandomCoordinates = () => ({
  type: "Point",
  coordinates: [
    -99.1332 + (Math.random() - 0.5) * 0.2, // Longitud (CDMX Centro)
    19.4326 + (Math.random() - 0.5) * 0.2, // Latitud (CDMX Centro)
  ],
});

/**
 * Obtiene un n√∫mero espec√≠fico de caracter√≠sticas √∫nicas de forma aleatoria.
 * @param {Array<number>} ids - El array de todos los IDs de caracter√≠sticas.
 * @param {number} count - El n√∫mero de IDs √∫nicos que se quieren obtener.
 * @returns {Array<number>} Un array con IDs √∫nicos.
 */
function getRandomUniqueCaracteristicas(ids, count) {
  const uniqueIds = new Set();
  // Bucle para asegurar que obtenemos el n√∫mero deseado de IDs √∫nicos
  while (uniqueIds.size < count && uniqueIds.size < ids.length) {
    uniqueIds.add(getRandom(ids));
  }
  return Array.from(uniqueIds); // Convertimos el Set de nuevo a un Array
}

/**
 * Crea un retraso para no saturar la API.
 * @param {number} ms - Milisegundos a esperar.
 */
const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

// --- L√≥gica Principal del Script ---

async function poblarBaseDeDatos() {
  try {
    console.log(
      "üöÄ Iniciando script de poblado de la base de datos v√≠a API...",
    );

    // 1. OBTENER DATOS EXISTENTES PARA LAS RELACIONES
    console.log("Obteniendo caracter√≠sticas existentes...");
    const { data: caracteristicas } = await axios.get(
      `${API_BASE_URL}/caracteristicas`,
    );
    if (!caracteristicas || caracteristicas.length === 0) {
      throw new Error(
        "No se encontraron caracter√≠sticas. Ejecuta primero los seeders b√°sicos.",
      );
    }
    const caracteristicasIds = caracteristicas.map((c) => c.id_caracteristica);

    // 2. CREAR NUEVOS BA√ëOS
    console.log(`\nCreando ${NUM_BA√ëOS_A_CREAR} nuevos ba√±os...`);
    for (let i = 0; i < NUM_BA√ëOS_A_CREAR; i++) {
      // Usamos la funci√≥n helper para garantizar caracter√≠sticas √∫nicas
      const randomCaracteristicas = getRandomUniqueCaracteristicas(
        caracteristicasIds,
        2,
      );

      const ba√±oData = {
        nombre: `${getRandom(nombresBa√±os)} #${i + 1}`,
        direccion: `Calle Ficticia ${Math.floor(Math.random() * 1000)}`,
        ubicacion: getRandomCoordinates(),
        costo: (Math.random() * 15).toFixed(2),
        estado: "Activo",
        caracteristicas: randomCaracteristicas,
      };

      const { data: nuevoBa√±o } = await axios.post(
        `${API_BASE_URL}/banios`,
        ba√±oData,
      );
      console.log(
        `‚úîÔ∏è  Ba√±o creado: ${nuevoBa√±o.nombre} (ID: ${nuevoBa√±o.id_ba√±o})`,
      );
      await sleep(50); // Peque√±a pausa para no sobrecargar el servidor
    }

    // 3. OBTENER LISTA COMPLETA DE BA√ëOS (INCLUYENDO LOS DEL SEEDER ORIGINAL Y LOS NUEVOS)
    console.log(
      "\nObteniendo la lista completa de ba√±os para crear rese√±as y reportes...",
    );
    const { data: todosLosBa√±os } = await axios.get(`${API_BASE_URL}/banios`);
    const todosLosBa√±osIds = todosLosBa√±os.map((b) => b.id_ba√±o);

    // 4. CREAR NUEVAS RESE√ëAS
    console.log(
      `\nCreando ${NUM_RESE√ëAS_POR_BA√ëO} rese√±as para cada uno de los ${todosLosBa√±osIds.length} ba√±os...`,
    );
    for (const ba√±oId of todosLosBa√±osIds) {
      for (let i = 0; i < NUM_RESE√ëAS_POR_BA√ëO; i++) {
        const rese√±aData = {
          id_ba√±o: ba√±oId,
          nombre_usuario: getRandom(nombresUsuarios),
          calificacion_limpieza: Math.floor(Math.random() * 5) + 1,
          calificacion_seguridad: Math.floor(Math.random() * 5) + 1,
          comentario: getRandom(comentariosRese√±as),
        };
        await axios.post(`${API_BASE_URL}/resenias`, rese√±aData);
        console.log(`‚úîÔ∏è  Rese√±a creada para el ba√±o ID: ${ba√±oId}`);
        await sleep(50);
      }
    }

    // 5. CREAR NUEVOS REPORTES
    console.log(`\nCreando ${NUM_REPORTES_TOTALES} reportes aleatorios...`);
    for (let i = 0; i < NUM_REPORTES_TOTALES; i++) {
      const reporteData = {
        id_ba√±o: getRandom(todosLosBa√±osIds),
        nombre_usuario: getRandom(nombresUsuarios),
        tipo_reporte: getRandom(tiposReportes),
        descripcion: "Este es un reporte de prueba generado por el script.",
      };
      await axios.post(`${API_BASE_URL}/reportes`, reporteData);
      console.log(`‚úîÔ∏è  Reporte creado para el ba√±o ID: ${reporteData.id_ba√±o}`);
      await sleep(50);
    }

    console.log("\n\n‚úÖ ¬°Proceso de poblado completado exitosamente!");
  } catch (error) {
    console.error("\n\n‚ùå ERROR DURANTE EL SCRIPT DE POBLADO:");
    if (error.response) {
      // El error vino de una respuesta de la API (ej. 400, 500)
      console.error(`Status: ${error.response.status}`);
      console.error("Data:", error.response.data);
    } else {
      // El error ocurri√≥ antes de la petici√≥n (ej. problema de red)
      console.error(error.message);
    }
  }
}

// Ejecutar la funci√≥n principal del script
poblarBaseDeDatos();
