// --- Evento Principal: Espera a que el HTML est√© completamente cargado ---
document.addEventListener("DOMContentLoaded", () => {
  // --- Referencias a Elementos del DOM que usaremos ---
  const mapDiv = document.getElementById("map");
  const sidebarContent = document.getElementById("sidebar-content");
  const addBathroomBtn = document.getElementById("add-bathroom-btn");

  // --- Variables Globales y Configuraci√≥n ---
  let map; // Guardar√° la instancia del mapa Leaflet
  const API_BASE_URL = "http://localhost:3000/api"; // La URL base de tu API

  /**
   * Funci√≥n Principal que se ejecuta al inicio
   */
  function init() {
    console.log("üöÄ Aplicaci√≥n iniciada.");
    initMap();
    loadAllBathrooms();

    // Asignar eventos a los botones principales
    addBathroomBtn.addEventListener("click", () => {
      // Por ahora, solo mostramos un mensaje.
      // M√°s adelante, esto mostrar√° el formulario para a√±adir un ba√±o.
      alert("Funcionalidad para a√±adir ba√±o no implementada todav√≠a.");
    });
  }

  /**
   * Inicializa el mapa Leaflet en el div 'map'
   */
  function initMap() {
    // Coordenadas iniciales [latitud, longitud] y nivel de zoom
    map = L.map(mapDiv).setView([19.4326, -99.1332], 13);

    // Carga y a√±ade la capa de mapa base de OpenStreetMap
    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
      attribution:
        '¬© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(map);

    console.log("üó∫Ô∏è Mapa inicializado.");
  }

  /**
   * Obtiene todos los ba√±os de la API y los a√±ade como marcadores al mapa.
   */
  async function loadAllBathrooms() {
    try {
      console.log("üì• Obteniendo datos de los ba√±os desde la API...");
      const response = await fetch(`${API_BASE_URL}/banios`);

      if (!response.ok) {
        throw new Error(
          `Error HTTP ${response.status}: ${response.statusText}`,
        );
      }

      const ba√±os = await response.json();
      console.log(`‚úîÔ∏è  ${ba√±os.length} ba√±os cargados.`);

      // Limpiamos los marcadores existentes antes de a√±adir nuevos (buena pr√°ctica)
      // Por ahora no es necesario, pero lo ser√° si implementamos filtros.

      ba√±os.forEach((ba√±o) => {
        // Leaflet usa [latitud, longitud], pero GeoJSON usa [longitud, latitud]
        const [longitude, latitude] = ba√±o.ubicacion.coordinates;

        // Crea un marcador para cada ba√±o
        const marker = L.marker([latitude, longitude]).addTo(map);

        // A√±ade un popup simple con el nombre del ba√±o
        marker.bindPopup(`<b>${ba√±o.nombre}</b>`);

        // --- Evento de Clic ---
        // Al hacer clic en un marcador, se cargar√°n sus detalles.
        marker.on("click", () => {
          // Por ahora, solo un log en consola para verificar que funciona
          console.log(`Clic en el ba√±o con ID: ${ba√±o.id_ba√±o}`);
          // En el siguiente paso, implementaremos la funci√≥n que muestra los detalles.
          // loadBathroomDetails(ba√±o.id_ba√±o);
        });
      });
    } catch (error) {
      console.error("‚ùå Error al cargar los ba√±os:", error);
      sidebarContent.innerHTML = `<p style="color: red;">No se pudieron cargar los datos del mapa. Aseg√∫rate de que el servidor backend est√© corriendo.</p>`;
    }
  }

  // --- Inicia la aplicaci√≥n ---
  init();
});
