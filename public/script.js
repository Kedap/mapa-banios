document.addEventListener("DOMContentLoaded", () => {
  const mapDiv = document.getElementById("map");
  const sidebarContent = document.getElementById("sidebar-content");
  const addBathroomBtn = document.getElementById("add-bathroom-btn");

  let map;
  const API_BASE_URL = "http://localhost:3000/api"; // La URL base de tu API

  /**
   * Funci√≥n Principal que se ejecuta al inicio
   */
  function init() {
    console.log("üöÄ Aplicaci√≥n iniciada.");
    initMap();
    loadAllBathrooms();

    addBathroomBtn.addEventListener("click", () => {
      alert("Funcionalidad para a√±adir ba√±o no implementada todav√≠a.");
    });
  }

  /**
   * Inicializa el mapa Leaflet en el div 'map'
   */
  function initMap() {
    // Coordenadas iniciales [latitud, longitud] y nivel de zoom
    map = L.map(mapDiv).setView([19.4326, -99.1332], 13);

    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
      attribution:
        '¬© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(map);

    console.log("üó∫Ô∏è Mapa inicializado.");
  }

  /**
   * Obtiene todos los ba√±os de la API y los a√±ade como marcadores al mapa.
   */
  async function loadAllBathrooms() {
    try {
      console.log("üì• Obteniendo datos de los ba√±os desde la API...");
      const response = await fetch(`${API_BASE_URL}/banios`);

      if (!response.ok) {
        throw new Error(
          `Error HTTP ${response.status}: ${response.statusText}`,
        );
      }

      const ba√±os = await response.json();
      console.log(`‚úîÔ∏è  ${ba√±os.length} ba√±os cargados.`);

      ba√±os.forEach((ba√±o) => {
        // Leaflet usa [latitud, longitud], pero GeoJSON usa [longitud, latitud]
        const [longitude, latitude] = ba√±o.ubicacion.coordinates;

        // Crea un marcador para cada ba√±o
        const marker = L.marker([latitude, longitude]).addTo(map);

        marker.bindPopup(`<b>${ba√±o.nombre}</b>`);

        // --- Evento de Clic ---
        marker.on("click", () => {
          loadBathroomDetails(ba√±o.id_ba√±o);
        });
      });
    } catch (error) {
      console.error("‚ùå Error al cargar los ba√±os:", error);
      sidebarContent.innerHTML = `<p style="color: red;">No se pudieron cargar los datos del mapa. Aseg√∫rate de que el servidor backend est√© corriendo.</p>`;
    }
  }

  /**
   * Carga los detalles de un ba√±o espec√≠fico desde la API
   * y los muestra en el panel lateral.
   * @param {number} ba√±oId - El ID del ba√±o a cargar.
   */
  async function loadBathroomDetails(ba√±oId) {
    try {
      sidebarContent.innerHTML = "<p>Cargando detalles...</p>"; // Muestra un estado de carga

      console.log(`‚ÑπÔ∏è  Pidiendo detalles para el ba√±o ID: ${ba√±oId}`);
      const response = await fetch(`${API_BASE_URL}/banios/${ba√±oId}`);

      if (!response.ok) {
        throw new Error(`Ba√±o con ID ${ba√±oId} no encontrado.`);
      }

      const ba√±o = await response.json();
      console.log("‚úîÔ∏è  Detalles recibidos:", ba√±o);

      const html = `
                <h3>${ba√±o.nombre}</h3>
                <p><strong>Direcci√≥n:</strong> ${ba√±o.direccion || "No especificada"}</p>
                <p><strong>Costo:</strong> $${parseFloat(ba√±o.costo).toFixed(2)}</p>
                <p><strong>Estado:</strong> ${ba√±o.estado}</p>
                
                <h4>Caracter√≠sticas:</h4>
                <ul class="caracteristicas-list">
                    ${
                      ba√±o.Caracteristicas && ba√±o.Caracteristicas.length > 0
                        ? ba√±o.Caracteristicas.map(
                            (c) => `<li>‚úîÔ∏è ${c.nombre_caracteristica}</li>`,
                          ).join("")
                        : "<li>No hay caracter√≠sticas especificadas.</li>"
                    }
                </ul>

                <h4>Rese√±as (${ba√±o.Rese√±as.length}):</h4>
                <ul class="rese√±as-list">
                    ${
                      ba√±o.Rese√±as && ba√±o.Rese√±as.length > 0
                        ? ba√±o.Rese√±as.map(
                            (r) => `
                            <li>
                                <strong>${r.Usuario ? r.Usuario.nombre_usuario : "An√≥nimo"}</strong> 
                                <small>(${new Date(r.fecha_rese√±a).toLocaleDateString()})</small>
                                <p>Limpieza: ${"‚≠ê".repeat(r.calificacion_limpieza)}${"‚òÜ".repeat(5 - r.calificacion_limpieza)}</p>
                                <p>Seguridad: ${"‚≠ê".repeat(r.calificacion_seguridad)}${"‚òÜ".repeat(5 - r.calificacion_seguridad)}</p>
                                <p>${r.comentario || ""}</p>
                            </li>
                        `,
                          ).join("")
                        : "<li>A√∫n no hay rese√±as para este lugar. ¬°S√© el primero!</li>"
                    }
                </ul>
            `;

      // Reemplazamos el contenido del panel con el nuevo HTML
      sidebarContent.innerHTML = html;
    } catch (error) {
      console.error(
        `‚ùå Error al cargar los detalles del ba√±o ${ba√±oId}:`,
        error,
      );
      sidebarContent.innerHTML = `<p style="color: red;">No se pudieron cargar los detalles de este ba√±o.</p>`;
    }
  }

  init();
});
